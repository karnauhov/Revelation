name: Flutter Build

on:
  push:
    branches:
      - main
    paths:
      - "CHANGELOG.md"
      - "**.dart"
      - "pubspec.yaml"
      - "lib/**"
      - "assets/**"

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      SIGNING_STORE_FILE_BASE64: ${{ secrets.SIGNING_STORE_FILE_BASE64 }}
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      - name: Extract version and build number (Windows)
        id: extract_version_windows
        shell: bash
        run: |
          if [ ! -f "pubspec.yaml" ]; then
            echo "pubspec.yaml not found in root directory."
            exit 1
          fi
          version_line=$(grep '^version:' pubspec.yaml)
          if [[ $version_line =~ ^version:\ ([0-9]+\.[0-9]+\.[0-9]+)\+([0-9]+) ]]; then
            version="${BASH_REMATCH[1]}"
            build="${BASH_REMATCH[2]}"
            echo "Extracted version: $version"
            echo "Extracted build: $build"
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "build=$build" >> $GITHUB_OUTPUT
          else
            echo "Failed to extract version and build from line: $version_line"
            exit 1
          fi

      - name: Extract Release Notes
        id: extract_release_notes
        shell: pwsh
        run: |
          $version = '${{ steps.extract_version_windows.outputs.version }}' 
          Write-Output "Getting release notes for version $version"
          if (!(Test-Path -Path 'CHANGELOG.md')) {
            Write-Error "CHANGELOG.md not found in root directory."
            exit 1
          }
          $content = Get-Content CHANGELOG.md -Raw -Encoding UTF8
          $pattern = "(## \[$version\].*?)(?=\n## |\Z)"
          $matches = [regex]::Matches($content, $pattern, 'Singleline')
          if ($matches.Count -gt 0) {
            $releaseNotes = $matches[0].Groups[1].Value.Trim()
            $releaseNotes = $releaseNotes -replace "(\r?\n)?---\s*$", ""
            Write-Output "Extracted release notes for version ${version}:"
            Write-Output $releaseNotes
            Set-Content -Path 'release_notes.txt' -Value $releaseNotes -Encoding UTF8
          } else {
            Write-Error "Release notes for version $version not found in CHANGELOG.md"
            exit 1
          }

      - name: Build APK
        run: flutter build apk --release

      - name: Rename APK
        shell: pwsh
        run: |
          $version = '${{ steps.extract_version_windows.outputs.version }}'
          $build = '${{ steps.extract_version_windows.outputs.build }}'
          $sourcePath = 'build/app/outputs/flutter-apk/app-release.apk'
          $destFileName = "Revelation-android-$version-$build.apk"
          $destPath = "build/app/outputs/flutter-apk/$destFileName"
          Write-Output "Renaming $sourcePath to $destPath"
          Rename-Item -Path $sourcePath -NewName $destFileName

      - name: Build App Bundle (AAB)
        run: flutter build appbundle --release

      - name: Rename AAB
        shell: pwsh
        run: |
          $version = '${{ steps.extract_version_windows.outputs.version }}'
          $build = '${{ steps.extract_version_windows.outputs.build }}'
          Move-Item -Path 'build/app/outputs/bundle/release/app-release.aab' -Destination "build/app/outputs/bundle/release/Revelation-android-$version-$build.aab"

      - name: Build Windows App
        run: flutter build windows --release --no-tree-shake-icons

      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: pwsh

      - name: Build Installer with Inno Setup
        shell: pwsh
        run: |
          $version = '${{ steps.extract_version_windows.outputs.version }}'
          $build = '${{ steps.extract_version_windows.outputs.build }}'
          $innoSetupScript = 'setup.iss'
          $innoSetupPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (!(Test-Path $innoSetupPath)) {
            Write-Error "Inno Setup compiler not found at $innoSetupPath"
            exit 1
          }
          & "$innoSetupPath" "/DMyAppVersion=$version" "/DMyAppBuild=$build" $innoSetupScript

      - name: Upload windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/app/outputs/flutter-apk/Revelation-android-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.apk
            build/windows/Revelation-windows-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.exe

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version_windows.outputs.version }}+${{ steps.extract_version_windows.outputs.build }}
          release_name: Release v${{ steps.extract_version_windows.outputs.version }} (${{ steps.extract_version_windows.outputs.build }} )
          draft: false
          prerelease: false
          body_path: "./release_notes.txt"

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/Revelation-android-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.apk
          asset_name: Revelation-android-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/bundle/release/Revelation-android-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.aab
          asset_name: Revelation-android-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.aab
          asset_content_type: application/octet-stream

      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/windows/Revelation-windows-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.exe
          asset_name: Revelation-windows-${{ steps.extract_version_windows.outputs.version }}-${{ steps.extract_version_windows.outputs.build }}.exe
          asset_content_type: application/octet-stream

  # build-macos:
  #   runs-on: macos-latest
  #   needs: build-windows
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: "temurin"
  #         java-version: "17"
  #         cache: "gradle"

  #     - name: Install Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "3.27.1"
  #         cache: true

  #     - name: Get Flutter dependencies
  #       run: flutter pub get

  #     - name: Extract version and build number (macOS)
  #       id: extract_version_macos
  #       run: |
  #         if [ ! -f "pubspec.yaml" ]; then
  #           echo "pubspec.yaml not found in root directory."
  #           exit 1
  #         fi
  #         version_line=$(grep '^version:' pubspec.yaml)
  #         if [[ $version_line =~ ^version:\ ([0-9]+\.[0-9]+\.[0-9]+)\+([0-9]+) ]]; then
  #           version="${BASH_REMATCH[1]}"
  #           build="${BASH_REMATCH[2]}"
  #           echo "Extracted version: $version"
  #           echo "Extracted build: $build"
  #           echo "version=$version" >> $GITHUB_OUTPUT
  #           echo "build=$build" >> $GITHUB_OUTPUT
  #         else
  #           echo "Failed to extract version and build from line: $version_line"
  #           exit 1
  #         fi

  #     - name: Build macOS
  #       run: flutter build macos --release --no-tree-shake-icons

  #     - name: Rename macOS Build
  #       run: |
  #         version=${{ steps.extract_version_macos.outputs.version }}
  #         build=${{ steps.extract_version_macos.outputs.build }}
  #         mv build/macos/Build/Products/Release/revelation.app build/macos/Build/Products/Release/Revelation-macos-$version-$build.app

  #     - name: Build iOS
  #       run: flutter build ios --release --no-codesign

  #     - name: Rename iOS Build
  #       run: |
  #         version=${{ steps.extract_version_macos.outputs.version }}
  #         build=${{ steps.extract_version_macos.outputs.build }}
  #         mv build/ios/iphoneos/Runner.app build/ios/iphoneos/Revelation-ios-$version-$build.app

  #     - name: Upload macOS Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-build-artifacts
  #         path: |
  #           build/macos/Build/Products/Release/Revelation-macos-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.app
  #           build/ios/iphoneos/Revelation-ios-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.app

  #     - name: Zip macOS .app
  #       run: zip -r Revelation-macos-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip build/macos/Build/Products/Release/Revelation-macos-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.app

  #     - name: Upload macOS App to Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.build-windows.outputs.release_upload_url }}
  #         asset_path: Revelation-macos-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip
  #         asset_name: Revelation-macos-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip
  #         asset_content_type: application/zip

  #     - name: Zip iOS .app
  #       run: zip -r Revelation-ios-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip build/ios/iphoneos/Revelation-ios-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.app  # .ipa
      
  #     - name: Upload iOS App to Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.build-windows.outputs.release_upload_url }}
  #         asset_path: Revelation-ios-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip  # .ipa
  #         asset_name: Revelation-ios-${{ steps.extract_version_macos.outputs.version }}-${{ steps.extract_version_macos.outputs.build }}.zip  # .ipa
  #         asset_content_type: application/zip
