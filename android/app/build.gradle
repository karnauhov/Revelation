import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "ai11.link.revelation"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "ai11.link.revelation"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        create("release") {
            keyAlias = System.getenv('SIGNING_KEY_ALIAS')
            keyPassword = System.getenv('SIGNING_KEY_PASSWORD')
            storePassword = System.getenv('SIGNING_STORE_PASSWORD')
            def storeFileBase64 = System.getenv('SIGNING_STORE_FILE_BASE64')
            if (storeFileBase64 != null) {
                def tempStoreFile = File.createTempFile("keystore", ".jks")
                tempStoreFile.deleteOnExit()
                def decodedBytes = storeFileBase64.decodeBase64()
                Files.write(Paths.get(tempStoreFile.path), decodedBytes)
                storeFile = tempStoreFile
            } else {
                throw new GradleException("The environment variable SIGNING_STORE_FILE_BASE64 is not set")
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}
